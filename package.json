{
  "name": "winsky",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint",
    "mcp:start": "cd ../mcp-server && npm start",
    "mcp:test": "cd ../mcp-server && npm test",
    "mcp:interactive": "cd ../mcp-server && node test-mcp.js",
    "mcp:stats": "cd ../mcp-server && node -r dotenv/config -e \"const { createClient } = require('@supabase/supabase-js'); const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); supabase.rpc('get_database_stats').then(r => console.log(JSON.stringify(r, null, 2))).catch(console.error)\"",
    "mcp:setup": "node .cursor-mcp-setup.js",
    "fs:start": "cd ../filesystem-mcp && npm start",
    "fs:test": "cd ../filesystem-mcp && npm test",
    "fs:read": "cd ../filesystem-mcp && node -r dotenv/config -e \"const { spawn } = require('child_process'); const mcp = spawn('node', ['dist/index.js'], {stdio: ['pipe', 'inherit', 'inherit']}); mcp.stdin.write(JSON.stringify({jsonrpc: '2.0', id: 1, method: 'tools/call', params: {name: 'read_file', arguments: {path: process.argv[2] || 'README.md'}}}) + '\\n'); setTimeout(() => mcp.kill(), 5000);\"",
    "fs:search": "cd ../filesystem-mcp && node -r dotenv/config -e \"const { spawn } = require('child_process'); const mcp = spawn('node', ['dist/index.js'], {stdio: ['pipe', 'inherit', 'inherit']}); mcp.stdin.write(JSON.stringify({jsonrpc: '2.0', id: 1, method: 'tools/call', params: {name: 'grep_search', arguments: {pattern: process.argv[2] || 'function'}}}) + '\\n'); setTimeout(() => mcp.kill(), 5000);\"",
    "memory:start": "cd ../memory-mcp && npm start",
    "memory:test": "cd ../memory-mcp && npm test",
    "memory:stats": "cd ../memory-mcp && node -e \"const { spawn } = require('child_process'); const mcp = spawn('node', ['dist/index.js'], {stdio: ['pipe', 'inherit', 'inherit']}); mcp.stdin.write(JSON.stringify({jsonrpc: '2.0', id: 1, method: 'tools/call', params: {name: 'get_memory_stats', arguments: {}}}) + '\\n'); setTimeout(() => mcp.kill(), 3000);\"",
    "memory:setup": "node .cursor-memory-setup.js",
    "cursor:mcp": "node .cursor-mcp-runner.js"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.2",
    "@mediapipe/face_mesh": "^0.4.1633559619",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toast": "^1.2.15",
    "@stripe/stripe-js": "^7.9.0",
    "@supabase/ssr": "^0.7.0",
    "@supabase/supabase-js": "^2.58.0",
    "@tanstack/react-query": "^5.90.2",
    "@tensorflow-models/face-landmarks-detection": "^1.0.6",
    "@tensorflow/tfjs": "^4.22.0",
    "ai": "^5.0.56",
    "axios": "^1.12.2",
    "chart.js": "^4.5.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.22",
    "jotai": "^2.15.0",
    "lucide-react": "^0.544.0",
    "next": "15.5.4",
    "next-pwa": "^5.6.0",
    "openai": "^5.23.1",
    "pusher-js": "^8.4.0",
    "react": "19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.63.0",
    "react-hot-toast": "^2.6.0",
    "react-intersection-observer": "^9.16.0",
    "react-use": "^17.6.0",
    "recharts": "^3.2.1",
    "stripe": "^18.5.0",
    "swr": "^2.3.6",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.1.11",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "eslint-config-prettier": "^10.1.8",
    "husky": "^9.1.7",
    "jest": "^30.2.0",
    "jest-environment-jsdom": "^30.2.0",
    "lint-staged": "^16.2.3",
    "prettier": "^3.6.2",
    "tailwindcss": "^3.4.0",
    "typescript": "^5",
    "workbox-webpack-plugin": "^7.3.0"
  }
}
